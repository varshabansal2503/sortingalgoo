ANS:1-- nums1 and nums2 into a single array sorted in non-decreasing order.
class Solution {
   public void merge(int[] nums1, int m, int[] nums2, int n) {
        int p1 = m - 1;
        int p2 = n - 1;
        int pMerge = m + n - 1;
        
        while (p2 >= 0) {
            if (p1 >= 0 && nums1[p1] > nums2[p2]) {
                nums1[pMerge--] = nums1[p1--];
            } else {
                nums1[pMerge--] = nums2[p2--];
            }
        }
    }
}
ANS:2--Kth Smallest Element in the Array.
public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int kthsmallest(final int[] A, int B)
     {
       

  
       

        // Sort the array
        Arrays.sort(A);

        // Return the kth smallest element
        return A[B- 1];
    }

     
}
ANS:3--Given an unsorted array arr[] of size N, the task is to check whether the array consists of consecutive numbers or not.
class Solution
{
    boolean areConsecutives(long arr[], int N)
    {
        int count=0;

            Arrays.sort(arr);
            for(int i=0;i<N-1;i++)
            {
                if(arr[i+1]==(arr[i]+1))
                {
                    count++;
                }
            }
            if(count==(N-1))
            {
                return true;
            }
            return false;
    }
}
ANS:4--Given an array of integers nums, sort the array in ascending order and return it.

You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

class Solution {

    public static void merge(int nums[],int si,int mid,int ei)
    {
        int temp[]=new int [ei-si+1];
        int i=si;
        int j=mid+1;
        int k=0;
        while(i<=mid && j<=ei)
        {
            {
                if(nums[i]<nums[j])
                {
                    temp[k]=nums[i];
                    i++;
                }
                else
                {
                    temp[k]=nums[j];
                    j++;
                }
                k++;
            }
        } 
        while(i<=mid)
        {
            temp[k++]=nums[i++];
        }  
        while(j<=ei)
        {
            temp[k++]=nums[j++];
        }
        for(k=0,i=si;k<temp.length;k++,i++)
        {
            nums[i]=temp[k];
        }
        
    }
     public static void merge_sort(int nums[],int si,int ei)
    {
        if(si>=ei)
        {
            return;
        }
        int mid=(si+ei)/2;
        merge_sort(nums,si,mid);
        merge_sort(nums,mid+1,ei);
        merge(nums,si,mid,ei);
    }
    public int[] sortArray(int[] nums) {
        merge_sort(nums,0,nums.length-1);
        return nums;
    }
}
NAS:5--Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

